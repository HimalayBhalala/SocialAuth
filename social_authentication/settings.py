"""
Django settings for social_authentication project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')    

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DUBUG')

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',  # Required for token authentication
    'rest_framework_simplejwt',  # Required for JWT authentication
    
    'authentication',
    
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.apple',
    'allauth.socialaccount.providers.linkedin_oauth2',
    'allauth.socialaccount.providers.microsoft',
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.instagram',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'authentication.middleware.JWTAuthenticationMiddleware',
]

ROOT_URLCONF = 'social_authentication.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',  # Required for allauth
            ],
        },
    },
]

WSGI_APPLICATION = 'social_authentication.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Determine if we're running on PythonAnywhere
IS_PYTHONANYWHERE = 'PYTHONANYWHERE_SITE' in os.environ

# Use SQLite for local development if DB connection fails
USE_SQLITE_FALLBACK = os.environ.get('USE_SQLITE_FALLBACK', 'false').lower() == 'true'

# Database configuration based on environment
if IS_PYTHONANYWHERE:
    # PythonAnywhere MySQL configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('PA_DB_NAME', 'yourusername$dbname'),
            'USER': os.environ.get('PA_DB_USER', 'yourusername'),
            'PASSWORD': os.environ.get('PA_DB_PASSWORD', ''),
            'HOST': os.environ.get('PA_DB_HOST', 'yourusername.mysql.pythonanywhere-services.com'),
            'OPTIONS': {
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            }
        }
    }
elif USE_SQLITE_FALLBACK:
    # SQLite fallback for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Standard MySQL configuration
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.mysql'),
            'NAME': os.environ.get('DB_NAME') or os.environ.get('MYSQL_DATABASE', 'social_auth_db'),
            'USER': os.environ.get('DB_USER') or os.environ.get('MYSQL_USER', 'django_user'),
            'PASSWORD': os.environ.get('DB_PASSWORD') or os.environ.get('MYSQL_PASSWORD', 'secure_password_123'),
            'HOST': os.environ.get('DB_HOST') or os.environ.get('MYSQL_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT') or os.environ.get('MYSQL_PORT', '3306'),
            'OPTIONS': {
                'charset': 'utf8mb4',
                'sql_mode': 'TRADITIONAL',
                'init_command': "SET foreign_key_checks = 0;",
            },
            'TEST': {
                'NAME': 'test_' + (os.environ.get('DB_NAME') or os.environ.get('MYSQL_DATABASE', 'social_auth_db')),
                'CHARSET': 'utf8mb4',
                'COLLATION': 'utf8mb4_unicode_ci',
            }
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Google OAuth
GOOGLE_OAUTH_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")
GOOGLE_OAUTH_CALLBACK_URL = os.getenv("GOOGLE_OAUTH_CALLBACK_URL") 

# Apple OAuth
APPLE_CLIENT_ID = os.environ.get('APPLE_CLIENT_ID')
APPLE_KEY_ID = os.environ.get('APPLE_KEY_ID')
APPLE_PRIVATE_KEY = 'secrets/AuthKey.p8'
APPLE_TEAM_ID=os.environ.get('APPLE_TEAM_ID')
APPLE_CALLBACK_URL = os.environ.get("APPLE_CALLBACK_URL") 
APPLE_REDIRECT_URI = 'https://ac26-117-98-139-20.ngrok-free.app/api/auth/login'

# Github OAuth
GITHUB_OAUTH_CLIENT_ID = os.getenv("GITHUB_OAUTH_CLIENT_ID")
GITHUB_OAUTH_CLIENT_SECRET = os.getenv("GITHUB_OAUTH_CLIENT_SECRET")
GITHUB_OAUTH_CALLBACK_URL = os.getenv("GITHUB_OAUTH_CALLBACK_URL") 

# LinkedIn OAuth
LINKEDIN_OAUTH_CLIENT_ID = os.getenv("LINKEDIN_OAUTH_CLIENT_ID")
LINKEDIN_OAUTH_CLIENT_SECRET = os.getenv("LINKEDIN_OAUTH_CLIENT_SECRET")
LINKEDIN_OAUTH_CALLBACK_URL = os.getenv("LINKEDIN_OAUTH_CALLBACK_URL") 

# Microsoft OAuth
MICROSOFT_OAUTH_CLIENT_ID = os.getenv("MICROSOFT_OAUTH_CLIENT_ID")
MICROSOFT_OAUTH_CLIENT_SECRET = os.getenv("MICROSOFT_OAUTH_CLIENT_SECRET")
MICROSOFT_OAUTH_CALLBACK_URL = os.getenv("MICROSOFT_OAUTH_CALLBACK_URL") 

# Twitter OAuth
TWITTER_OAUTH_CLIENT_ID = os.getenv("TWITTER_OAUTH_CLIENT_ID")
TWITTER_OAUTH_CLIENT_SECRET = os.getenv("TWITTER_OAUTH_CLIENT_SECRET")
TWITTER_OAUTH_CALLBACK_URL = os.getenv("TWITTER_OAUTH_CALLBACK_URL") 

# Facebook OAuth
FACEBOOK_OAUTH_CLIENT_ID = os.getenv("FACEBOOK_OAUTH_CLIENT_ID")
FACEBOOK_OAUTH_CLIENT_SECRET = os.getenv("FACEBOOK_OAUTH_CLIENT_SECRET")
FACEBOOK_OAUTH_CALLBACK_URL = os.getenv("FACEBOOK_OAUTH_CALLBACK_URL") 

# Instagram OAuth
INSTAGRAM_OAUTH_CLIENT_ID = os.getenv("INSTAGRAM_OAUTH_CLIENT_ID")
INSTAGRAM_OAUTH_CLIENT_SECRET = os.getenv("INSTAGRAM_OAUTH_CLIENT_SECRET")
INSTAGRAM_OAUTH_CALLBACK_URL = os.getenv("INSTAGRAM_OAUTH_CALLBACK_URL") 


# Authenticate if local account with this email address already exists
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
# Connect local account and social account if local account with that email address already exists
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": GOOGLE_OAUTH_CLIENT_ID,
                "secret": GOOGLE_OAUTH_CLIENT_SECRET,
                "key": "",
            },
        ],
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    'apple': {
        "APP": {
            "client_id": APPLE_CLIENT_ID,
            "secret": APPLE_PRIVATE_KEY,
            "key": APPLE_KEY_ID,
            "certificate_key": APPLE_PRIVATE_KEY
        },
        'SCOPE': ['name', 'email'],
        'REDIRECT_URI': 'https://ac26-117-98-139-20.ngrok-free.app/api/auth/login'
    },
    'github': {
        "APP": {
            "client_id": GITHUB_OAUTH_CLIENT_ID,
            "secret": GITHUB_OAUTH_CLIENT_SECRET,
        },
        'SCOPE': ['user', 'user:email'],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
    },
   'linkedin_oauth2': {
        'SCOPE': [
            'r_liteprofile',
            'r_emailaddress',
        ],
        'PROFILE_FIELDS': [
            'id',
            'first-name',
            'last-name',
            'email-address',
        ],
    },
    'microsoft': {
        "APP": {
            "client_id": MICROSOFT_OAUTH_CLIENT_ID,
            "secret": MICROSOFT_OAUTH_CLIENT_SECRET,
        },
        'SCOPE': ['user', 'email'],
    },
    'twitter': {
        "APP": {
            "client_id": TWITTER_OAUTH_CLIENT_ID,
            "secret": TWITTER_OAUTH_CLIENT_SECRET,
        },
        'SCOPE': ['user', 'email'],
    },
    'facebook': {
        "APP": {
            "client_id": FACEBOOK_OAUTH_CLIENT_ID,
            "secret": FACEBOOK_OAUTH_CLIENT_SECRET,
        },
        'SCOPE': ['user', 'email'],
    },
    'instagram': {
        "APP": {
            "client_id": INSTAGRAM_OAUTH_CLIENT_ID,
            "secret": INSTAGRAM_OAUTH_CLIENT_SECRET,
        },
        'SCOPE': ['user_profile', 'user_email'],
    },
}


# Allow CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://www.skapasaga.se",
]

CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'EXCEPTION_HANDLER': 'authentication.exceptions.custom_exception_handler',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.environ.get('SECRET_KEY'),
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'authentication.User'


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Directory where collectstatic will collect static files
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations the staticfiles app will traverse
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# For PythonAnywhere deployment
if IS_PYTHONANYWHERE:
    # Update static root for PythonAnywhere
    STATIC_ROOT = '/home/yourusername/staticfiles'
    
    # Configure MEDIA settings for PythonAnywhere
    MEDIA_URL = '/media/'
    MEDIA_ROOT = '/home/yourusername/media'
else:
    # Local media settings
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session Settings
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Site ID (required for allauth)
SITE_ID = 1

LOGIN_URL = 'http://localhost:8000/'

LOGIN_REDIRECT_URL = 'http://localhost:8000/'
LOGOUT_REDIRECT_URL = 'http://localhost:8000/'


CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://127.0.0.1",
    "http://0.0.0.0",
]


# Alternative configuration for different environments
if os.environ.get('DJANGO_ENV') == 'testing':
    DATABASES['default'].update({
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET foreign_key_checks = 0;",
        }
    })

# For CI/CD environments, ensure we have proper test database settings
if os.environ.get('CI') or os.environ.get('GITHUB_ACTIONS'):
    DATABASES['default'].update({
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'NAME': 'test_db',
        'USER': 'test_user',
        'PASSWORD': 'test_password',
    })