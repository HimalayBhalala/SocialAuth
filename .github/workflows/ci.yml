name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_social_auth_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -ptest_root_password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=60s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libmysqlclient-dev \
          build-essential \
          pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django
    
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -u root -ptest_root_password --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done
    
    - name: Create management command directory
      run: |
        mkdir -p management/commands
        touch management/__init__.py
        touch management/commands/__init__.py
    
    - name: Run database migrations
      env:
        DB_NAME: test_social_auth_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        python manage.py migrate_safely --max-retries=10 --retry-delay=3
    
    - name: Run tests with coverage
      env:
        DB_NAME: test_social_auth_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run linting with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        pip install black
        black --check --diff .
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        cat bandit-report.json
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t django-social-auth:latest .
    
    - name: Test Docker image
      run: |
        # Create a test network
        docker network create test-network
        
        # Start MySQL container
        docker run -d --name test-mysql \
          --network test-network \
          -e MYSQL_ROOT_PASSWORD=test_password \
          -e MYSQL_DATABASE=test_db \
          -e MYSQL_USER=test_user \
          -e MYSQL_PASSWORD=test_password \
          mysql:8.0
        
        # Wait for MySQL
        sleep 30
        
        # Test the Django container
        docker run --rm --name test-django \
          --network test-network \
          -e DB_HOST=test-mysql \
          -e DB_NAME=test_db \
          -e DB_USER=test_user \
          -e DB_PASSWORD=test_password \
          -e SECRET_KEY=test-key \
          -e DEBUG=False \
          -e ALLOWED_HOSTS=localhost \
          django-social-auth:latest \
          sh -c "python manage.py migrate_safely && python manage.py check"
        
        # Cleanup
        docker stop test-mysql
        docker network rm test-network
    
    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save django-social-auth:latest | gzip > django-social-auth.tar.gz
    
    - name: Upload Docker image artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: django-social-auth.tar.gz
        retention-days: 7