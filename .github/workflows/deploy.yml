name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests paramiko
    
    - name: Set up SSH key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      run: |
        # Debug variables (without revealing secrets)
        echo "PA_USERNAME is set: $([[ -n "$PA_USERNAME" ]] && echo "Yes" || echo "No")"
        echo "SSH_PRIVATE_KEY length: ${#SSH_PRIVATE_KEY}"
        
        # Exit if variables are not set
        if [[ -z "$PA_USERNAME" ]]; then
          echo "ERROR: PYTHONANYWHERE_USERNAME secret is not set"
          exit 1
        fi
        
        if [[ -z "$SSH_PRIVATE_KEY" ]]; then
          echo "ERROR: SSH_PRIVATE_KEY secret is not set"
          exit 1
        fi
        
        # Set up SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Save private key to file
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add host key to known_hosts
        ssh-keyscan -t rsa ssh.pythonanywhere.com >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        # Show SSH files (for debugging)
        ls -la ~/.ssh/
        echo "SSH key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
    
    - name: Test SSH connection
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      run: |
        echo "Testing SSH connection..."
        ssh -o BatchMode=yes -o ConnectTimeout=10 -i ~/.ssh/id_rsa $PA_USERNAME@ssh.pythonanywhere.com "echo SSH connection successful"
    
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on error
        
        echo "Starting deployment on PythonAnywhere..."
        
        cd ~/SocialAuth || { echo "Error: SocialAuth directory not found"; exit 1; }
        echo "Pulling latest code from GitHub..."
        git pull origin main
        
        # Create directories if they don't exist
        echo "Setting up directories..."
        mkdir -p ~/staticfiles
        mkdir -p ~/media
        chmod -R 755 ~/staticfiles
        chmod -R 755 ~/media
        
        # Create WSGI file
        echo "Creating WSGI file..."
        mkdir -p ~/var/www
        cat > ~/var/www/${USER}_pythonanywhere_com_wsgi.py << 'EOF'
        """
        WSGI config for PythonAnywhere deployment.
        """
        
        import os
        import sys
        
        # Add your project directory to the sys.path
        path = os.path.expanduser('~/SocialAuth')
        if path not in sys.path:
            sys.path.insert(0, path)
        
        # IMPORTANT: Set environment variables BEFORE importing Django
        os.environ['SECRET_KEY'] = 'y7aovwgl0v0p8v@85klqnuoj6ndm@l02h4g2q^)&)c+lt#9w7p'
        os.environ['DJANGO_SETTINGS_MODULE'] = 'social_authentication.settings'
        os.environ['PYTHONANYWHERE_SITE'] = 'true'
        os.environ['DB_NAME'] = '${USER}$default'
        os.environ['DB_USER'] = '${USER}'
        os.environ['DB_PASSWORD'] = 'Social0000'
        os.environ['DB_HOST'] = '${USER}.mysql.pythonanywhere-services.com'
        os.environ['DEBUG'] = 'False'
        
        # Import and set up the Django WSGI application
        from django.core.wsgi import get_wsgi_application
        application = get_wsgi_application()
        EOF
        
        # Activate virtual environment and install dependencies
        echo "Installing dependencies..."
        source ~/venv/bin/activate || { echo "Error: Virtual environment not found"; exit 1; }
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Run migrations
        echo "Running database migrations..."
        python manage.py migrate
        
        # Collect static files
        echo "Collecting static files..."
        python manage.py collectstatic --noinput
        
        # Reload web app via API
        echo "Reloading web application..."
        curl -X POST \
          -H "Authorization: Token ${API_TOKEN}" \
          https://www.pythonanywhere.com/api/v0/user/${USER}/webapps/${USER}.pythonanywhere.com/reload/
        
        echo "Deployment completed successfully!"
        EOL
    
    - name: Deploy to PythonAnywhere
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
        PA_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
      run: |
        # Copy deployment script
        echo "Copying deployment script..."
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa deploy.sh $PA_USERNAME@ssh.pythonanywhere.com:~/deploy.sh
        
        # Execute deployment script
        echo "Running deployment script..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $PA_USERNAME@ssh.pythonanywhere.com "chmod +x ~/deploy.sh && API_TOKEN='${PA_API_TOKEN}' ~/deploy.sh"
        
        echo "Deployment completed!" 