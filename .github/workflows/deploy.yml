name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check required secrets
      id: check_secrets
      run: |
        if [[ -z "${{ secrets.PYTHONANYWHERE_USERNAME }}" ]]; then
          echo "::error::Missing PYTHONANYWHERE_USERNAME secret. Please add it in repository settings."
          exit 1
        fi
        
        if [[ -z "${{ secrets.PYTHONANYWHERE_API_TOKEN }}" ]]; then
          echo "::error::Missing PYTHONANYWHERE_API_TOKEN secret. Please add it in repository settings."
          exit 1
        fi
    
    - name: Generate new SSH key
      id: generate_ssh_key
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      run: |
        # Set up SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Remove any existing known_hosts entries for PythonAnywhere
        ssh-keygen -f ~/.ssh/known_hosts -R ssh.pythonanywhere.com || true
        
        # Get the latest host key from PythonAnywhere
        ssh-keyscan -t rsa ssh.pythonanywhere.com > ~/.ssh/temp_known_hosts 2>/dev/null
        cat ~/.ssh/temp_known_hosts >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        # Generate a new SSH key (in PEM format)
        ssh-keygen -t rsa -b 4096 -m PEM -f ~/.ssh/id_rsa -N ""
        
        # Display the public key
        echo "Generated new SSH key:"
        cat ~/.ssh/id_rsa.pub
        
        # Store the public key for later use
        echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)" >> $GITHUB_ENV
        
        echo "*** IMPORTANT ***"
        echo "You need to add this public key to your PythonAnywhere account:"
        echo "1. Go to PythonAnywhere → Account → SSH keys"
        echo "2. Add the public key shown above"
        echo "3. Run this workflow again after adding the key"
        
        # Show SSH files for debugging
        ls -la ~/.ssh/
    
    - name: Wait for manual step
      run: |
        echo "This workflow needs manual intervention:"
        echo "You need to add the generated SSH public key to your PythonAnywhere account."
        echo "Please check the previous step's output to copy the key."
        echo ""
        echo "If you have already added the key, you can continue."
        sleep 5
    
    - name: Test SSH connection with generated key
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      continue-on-error: true
      id: ssh_test
      run: |
        echo "Testing SSH connection with generated key..."
        ssh -v -o StrictHostKeyChecking=accept-new -o BatchMode=yes -o ConnectTimeout=10 $PA_USERNAME@ssh.pythonanywhere.com "echo SSH connection successful"
        if [ $? -eq 0 ]; then
          echo "SSH_CONNECTION_SUCCESSFUL=true" >> $GITHUB_ENV
          echo "SSH connection successful!"
        else
          echo "SSH_CONNECTION_SUCCESSFUL=false" >> $GITHUB_ENV
          echo "SSH connection failed. Please make sure you've added the public key to PythonAnywhere."
          echo "You'll need to manually add the public key and run this workflow again."
        fi
    
    - name: Create deployment script
      if: env.SSH_CONNECTION_SUCCESSFUL == 'true'
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      run: |
        cat > deploy.sh << EOF
        #!/bin/bash
        set -e  # Exit on error
        
        echo "Starting deployment on PythonAnywhere..."
        
        # Navigate to project directory or clone if doesn't exist
        if [ ! -d "\$HOME/SocialAuth" ]; then
          echo "Creating project directory..."
          mkdir -p \$HOME/SocialAuth
        fi
        
        cd \$HOME/SocialAuth
        
        # Check if git repo is initialized
        if [ ! -d ".git" ]; then
          echo "Initializing git repository..."
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
        fi
        
        echo "Pulling latest code from GitHub..."
        git fetch --all
        git reset --hard origin/main
        
        # Set up directories
        echo "Setting up directories..."
        mkdir -p \$HOME/staticfiles \$HOME/media \$HOME/var/www
        chmod -R 755 \$HOME/staticfiles \$HOME/media
        
        # Create WSGI file
        echo "Creating WSGI file..."
        cat > \$HOME/var/www/${PA_USERNAME}_pythonanywhere_com_wsgi.py << 'EOFWSGI'
        """
        WSGI config for PythonAnywhere deployment.
        """
        import os
        import sys

        # Add project directory to path
        path = os.path.expanduser('~/SocialAuth')
        if path not in sys.path:
            sys.path.insert(0, path)
        
        # Set environment variables BEFORE importing Django
        os.environ['SECRET_KEY'] = 'y7aovwgl0v0p8v@85klqnuoj6ndm@l02h4g2q^)&)c+lt#9w7p'
        os.environ['DJANGO_SETTINGS_MODULE'] = 'social_authentication.settings'
        os.environ['PYTHONANYWHERE_SITE'] = 'true'
        os.environ['DB_NAME'] = '${PA_USERNAME}\$default'
        os.environ['DB_USER'] = '${PA_USERNAME}'
        os.environ['DB_PASSWORD'] = 'Social0000'
        os.environ['DB_HOST'] = '${PA_USERNAME}.mysql.pythonanywhere-services.com'
        os.environ['DEBUG'] = 'False'
        
        # Import Django WSGI application
        from django.core.wsgi import get_wsgi_application
        application = get_wsgi_application()
        EOFWSGI
        
        # Set up virtual environment if needed
        if [ ! -d \$HOME/venv ]; then
          echo "Creating virtual environment..."
          python3 -m venv \$HOME/venv
        fi
        
        # Install dependencies
        echo "Installing dependencies..."
        source \$HOME/venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Run migrations and collect static files
        echo "Running migrations..."
        python manage.py migrate --noinput
        
        echo "Collecting static files..."
        python manage.py collectstatic --noinput
        
        # Reload web app via API
        echo "Reloading web application..."
        curl -s -X POST \
          -H "Authorization: Token ${API_TOKEN}" \
          https://www.pythonanywhere.com/api/v0/user/${PA_USERNAME}/webapps/${PA_USERNAME}.pythonanywhere.com/reload/
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
    
    - name: Deploy to PythonAnywhere
      if: env.SSH_CONNECTION_SUCCESSFUL == 'true'
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
        PA_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
      run: |
        echo "Copying deployment script to PythonAnywhere..."
        scp -o StrictHostKeyChecking=accept-new deploy.sh $PA_USERNAME@ssh.pythonanywhere.com:~/deploy.sh
        
        echo "Running deployment script on PythonAnywhere..."
        ssh -o StrictHostKeyChecking=accept-new $PA_USERNAME@ssh.pythonanywhere.com "chmod +x ~/deploy.sh && API_TOKEN='${PA_API_TOKEN}' ~/deploy.sh"
    
    - name: Verify deployment
      if: env.SSH_CONNECTION_SUCCESSFUL == 'true'
      env:
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      run: |
        echo "Verifying deployment..."
        sleep 10
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$PA_USERNAME.pythonanywhere.com)
        echo "Site status: $HTTP_STATUS"
        if [[ "$HTTP_STATUS" == "200" ]]; then
          echo "Deployment verified successfully!"
        else
          echo "Site may still be starting up. Check manually at https://$PA_USERNAME.pythonanywhere.com"
        fi 