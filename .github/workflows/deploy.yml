name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests paramiko
    
    - name: Deploy to PythonAnywhere
      env:
        PA_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
        PA_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ssh.pythonanywhere.com
      run: |
        # Create SSH directory and set permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Create SSH key file with proper permissions
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Set up SSH config for easier connection
        cat > ~/.ssh/config << EOF
        Host pythonanywhere
          HostName ssh.pythonanywhere.com
          User ${PA_USERNAME}
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
        EOF
        chmod 600 ~/.ssh/config
        
        # Add host key without strict checking
        ssh-keyscan -t rsa ssh.pythonanywhere.com >> ~/.ssh/known_hosts
        
        # Create deployment script
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on error
        
        echo "Starting deployment on PythonAnywhere..."
        
        cd ~/SocialAuth || { echo "Error: SocialAuth directory not found"; exit 1; }
        echo "Pulling latest code from GitHub..."
        git pull origin main
        
        # Create directories if they don't exist
        echo "Setting up directories..."
        mkdir -p ~/staticfiles
        mkdir -p ~/media
        chmod -R 755 ~/staticfiles
        chmod -R 755 ~/media
        
        # Activate virtual environment and install dependencies
        echo "Installing dependencies..."
        source ~/venv/bin/activate || { echo "Error: Virtual environment not found"; exit 1; }
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Run migrations
        echo "Running database migrations..."
        python manage.py migrate
        
        # Collect static files
        echo "Collecting static files..."
        python manage.py collectstatic --noinput
        
        # Reload web app via API
        echo "Reloading web application..."
        RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: Token ${API_TOKEN}" \
          https://www.pythonanywhere.com/api/v0/user/${USERNAME}/webapps/${USERNAME}.pythonanywhere.com/reload/)
        
        HTTP_CODE=${RESPONSE: -3}
        if [[ $HTTP_CODE == "200" ]]; then
          echo "Web app reloaded successfully!"
        else
          echo "Error reloading web app. HTTP code: $HTTP_CODE"
          echo "Response: ${RESPONSE%???}"
          exit 1
        fi
        
        echo "Deployment completed successfully!"
        EOL
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        if ssh -o BatchMode=yes -o ConnectTimeout=5 pythonanywhere "echo SSH connection successful"; then
          echo "SSH connection working correctly, proceeding with deployment"
        else
          echo "SSH connection failed, checking key permissions and debug info"
          ls -la ~/.ssh/
          ssh -v pythonanywhere "echo test"
          exit 1
        fi
        
        # Copy script to PythonAnywhere using the configured host
        scp deploy.sh pythonanywhere:~/deploy.sh
        
        # Execute script with variables
        ssh pythonanywhere "chmod +x ~/deploy.sh && API_TOKEN='${PA_API_TOKEN}' USERNAME='${PA_USERNAME}' ~/deploy.sh"
        
        echo "Deployment completed!"
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        sleep 10
        SITE_URL="https://${{ secrets.PYTHONANYWHERE_USERNAME }}.pythonanywhere.com"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SITE_URL)
        echo "Site status: $HTTP_STATUS"
        if [[ "$HTTP_STATUS" == "200" ]]; then
          echo "Deployment verified successfully!"
        else
          echo "Site may still be starting up. Check manually at $SITE_URL"
        fi